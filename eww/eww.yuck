(defwindow powermenu
  :monitor 0 ;; wayland users may need this
  :stacking "bottom"
  :windowtype "normal"
  :wm-ignore true
  :geometry (geometry :width "100%" :height "105%")
  (powermenu_layout))

(defpoll time :interval "5s"
  :initial `date +'{"hour":"%H","min":"%M"}'`
  `date +'{"hour":"%H", "min":"%M"}'`)

(defwidget powermenu_layout []
  (box :class "layout-box" :space-evenly false :orientation "vertical"
    (box :valign "start" :space-evenly false :spacing 25
      (_sundial)
      (label :text "|" :class "sep")
      (button :onclick "eww close powermenu" :class "close-btn" ""))
    (box :space-evenly false :hexpand true :vexpand true
      (box :spacing 15 :class "tm-box" :space-evenly false
            :valign "end" :halign "start"
        (label :text "")
        (label :text "${time.hour}  ${time.min}"))
      (_buttons :shutdown "poweroff" :reboot "reboot"
                :shutdown_icon "󰗼" :reboot_icon "󰜉"
                ))))

(defwidget _buttons [shutdown shutdown_icon reboot reboot_icon]
  (box :class "btns-box" :spacing 5
       :vexpand true :hexpand true
       :valign "end" :halign "end"
       :space-evenly false
    (button :onclick shutdown shutdown_icon)
    (button :onclick reboot reboot_icon)))

(defwidget _sundial []
  (label :class "sundial-lbl" :halign "end" :hexpand true
         :text {time.hour >= 2 && time.hour <= 4 ? "Early Morning" :
               time.hour <= 5 ? "Dawn" :
               time.hour >= 6
                && (time.hour <= 8 && time.min <= 59)
                  ? "Morning" :
               time.hour >= 9
                 && (time.hour <= 11 && time.min <= 59)
                   ? "Late Morning" :
               time.hour == 12 && time.min <= 29
                 ? "Midday" :
               time.hour >= 12 && time.hour <= 16
                 ? "Afternoon" :
               time.hour > 16 && time.hour <= 17
                 ? "Late Afternoon" :
               (time.hour >= 17 && time.min <= 1)
                 || (time.hour <= 18 && time.min <= 20)
                   ? "Early Evening" :
               time.hour >= 18 && time.hour <= 19
                 ? "Dusk" :
               time.hour > 19 && time.hour <= 21
                 ? "Late Evening" :
               time.hour > 21 ? "Night" : "Midnight"}))

;(defwidget workspaces []
;   (box :class "workspaces"
;         :valign "center"
;         :vexpand true
;         :orientation "vertical"
;        (label :class "nerd" :text workspaces_poll)))

(defwidget workspaces0 []
    (box :class "workspaces"
      :orientation "vertical"
      :vexpand true
      (for i in workspace0
        (button
          :onclick "hyprctl dispatch workspace ${i.id}"
          :class "${i.class}"
          "${i.name}"))))

(defwidget _barclock []
  (box :orientation "v"
       :class "time"
    hour min))

(defwidget _topsegment [screen]
  (box :vertical true
    :valign "start"
    :space-evenly true
    :spacing 5
    (workspaces0)
))

(defwidget _middlesegment [screen]
    (box :orientation "v"
    :valign "center"
    :space-evenly true
    :spacing 5
))

(defwidget _bottomsegment [screen]
  (box :orientation "v"
       :valign "end"
       :space-evenly false
       :spacing "5"
       (systray :pack-direction "btt" :icon-size "16" :orientation "v" :spacing "5")
       (label :text "|" :class "sep2" :angle "90")
       (_barclock)
))

(defwidget bar [screen]
  (centerbox :orientation "v"
    (box :class "segment-top"
         :valign "start"
      (_topsegment :screen screen))
    (box :valign "center"
         :class "middle"
      (_middlesegment :screen screen))
    (box :valign "end"
         :class "segment-bottom"
      (_bottomsegment :screen screen))))

(defwindow bar_1
    :monitor 0
    :stacking "bottom"
    :namespace "bar"
    :geometry (geometry :x 0 :y 0 :width "60px" :height "100%" :anchor "center left")
    :reserve (struts :distance "60px" :side "left")
    :exclusive true
    (bar :screen 1))

;(defpoll workspace0 :(defpoll wsinfo :interval "0.2s" "bash ~/.config/eww/scripts/workspaces.sh")
(deflisten workspace0 "hyprland-workspaces `hyprctl monitors -j | jq -r \".[0].name\"`")
(defpoll hour :interval "10s" "date +%H")
(defpoll min  :interval "10s" "date +%M")

(defpoll cover_art_path :interval "1s" "scripts/get-cover.sh")
(defvar media-pause "playerctl play-pause")
(deflisten player_status :initial "Stopped" "playerctl metadata --format '{{status}}' --follow || echo 'Stopped'")
(defvar show_media false)
(defpoll date :interval "10s" "date '%b %d, %Y'")

(defpoll bluetooth_status :interval "0.1s" "scripts/bluetoothctl.sh status")

(defwidget _media-widget []
  (box :orientation "vertical" :class "media-widget-box"
    (box :class "music-widget" :orientation "h" :space-evenly false
        (box :class "cover-art" :style "background-image: url('${cover_art_path}');")
        (box :class "media-controls" :orientation "v"
            (button :class "media-controls-play-pause" :onclick "playerctl play-pause" {player_status == "Playing" ? "" : ""})
            (button :class "media-controls-button" :onclick "playerctl previous" "󰼨")
            (button :class "media-controls-button" :onclick "playerctl next" "󰼧")))
            (box :class "media-widget-misc" :orientation "h" :space-evenly false
    (box :orientation "h" (box :orientation "v"
        (button :class "media-controls-misc-btn" :onclick "scripts/buttons.sh --dolphin" "")
        (button :class "media-controls-misc-btn" :onclick "scripts/buttons.sh --audio" "")
        (button :class "media-controls-misc-btn" :onclick "scripts/buttons.sh --lock" "")))
    (box :orientation "v"
        (button :class "bluetooth-module module ${bluetooth_status == 'on' ? 'bluetooth-on' : 'bluetooth-off'}" :onclick "scripts/bluetoothctl.sh toggle" "󰂯")
        (button :class "media-controls-misc-btn" :onclick "scripts/buttons.sh --hyprshot" "󱊅")
        (button :class "media-controls-misc-btn" :onclick "scripts/buttons.sh --wofi" "")))
))

(defwidget _media_layout []
    (box :orientation "v"
        (_media-widget)
))

(defwindow media-widget
  :monitor 0
  :namespace "eww"
  :geometry (
    geometry :x "0px"
             :y "0px"
             :width "5px"
             :height "120px"
             :anchor "center right"
  )
  (eventbox
    :onhover "${EWW_CMD} update show_media=true"
    :onhoverlost "${EWW_CMD} update show_media=false"
    (revealer
      :transition "slideleft"
      :reveal show_media
      :duration "200ms"
      (_media_layout)
    )
  )
)
